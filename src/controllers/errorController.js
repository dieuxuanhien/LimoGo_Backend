const AppError = require('../utils/appError');

/**
 * H√†m x·ª≠ l√Ω l·ªói E11000 t·ª´ MongoDB, bi·∫øn n√≥ th√†nh l·ªói 400 v·ªõi th√¥ng b√°o th√¢n thi·ªán.
 */
const handleDuplicateFieldsDB = (err) => {
    const value = err.message.match(/(["'])(\\?.)*?\1/)[0];
    const message = `Gi√° tr·ªã b·ªã tr√πng l·∫∑p: ${value}. Vui l√≤ng s·ª≠ d·ª•ng m·ªôt gi√° tr·ªã kh√°c!`;
    return new AppError(message, 400);
};

const handleValidationErrorDB = (err) => {
    const errors = Object.values(err.errors).map(el => el.message);
    const message = `D·ªØ li·ªáu ƒë·∫ßu v√†o kh√¥ng h·ª£p l·ªá. ${errors.join('. ')}`;
    return new AppError(message, 400);
};

const sendErrorDev = (err, res) => {
    res.status(err.statusCode).json({
        status: err.status,
        error: err,
        message: err.message,
        stack: err.stack
    });
};

const sendErrorProd = (err, res) => {
    // A) L·ªói c√≥ th·ªÉ d·ª± ƒëo√°n ƒë∆∞·ª£c, g·ª≠i th√¥ng b√°o cho client
    if (err.isOperational) {
        return res.status(err.statusCode).json({
            status: err.status,
            message: err.message
        });
    }
    // B) L·ªói l·∫≠p tr√¨nh ho·∫∑c l·ªói kh√¥ng x√°c ƒë·ªãnh: kh√¥ng r√≤ r·ªâ chi ti·∫øt
    // 1) Log l·ªói
    console.error('ERROR üí•', err);
    // 2) G·ª≠i th√¥ng b√°o chung chung
    return res.status(500).json({
        status: 'error',
        message: 'ƒê√£ c√≥ l·ªói x·∫£y ra t·ª´ h·ªá th·ªëng!'
    });
};

module.exports = (err, req, res, next) => {
    err.statusCode = err.statusCode || 500;
    err.status = err.status || 'error';

    if (process.env.NODE_ENV === 'production') {
        sendErrorDev(err, res);
    } else { // Gi·∫£ s·ª≠ m·∫∑c ƒë·ªãnh l√† production
        let error = { ...err, message: err.message, name: err.name };

        // X·ª≠ l√Ω c√°c l·ªói c·ª• th·ªÉ c·ªßa Mongoose ƒë·ªÉ c√≥ th√¥ng b√°o t·ªët h∆°n
        if (error.code === 11000) error = handleDuplicateFieldsDB(error);
        if (error.name === 'ValidationError') error = handleValidationErrorDB(error);
        
        sendErrorProd(error, res);
    }
};